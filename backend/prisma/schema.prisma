generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int              @id @default(autoincrement())
  username               String           @unique @db.VarChar(255)
  fortyTwoId             Int?             @unique
  avatar                 String?          @db.VarChar(255)
  password               String?          @db.VarChar(255)
  twoFa                  Boolean          @default(false)
  twoFaSecret            String?          @db.VarChar(255)
  rating                 Int              @default(1000)
  wonMatches             GameRecord[]     @relation("won")
  lostMatches            GameRecord[]     @relation("lost")
  addedFriends           Friendship[]     @relation("sender")
  acceptedFriends        Friendship[]     @relation("receiver")
  privateMessageSender   PrivateMessage[] @relation("Sender")
  privateMessageReceiver PrivateMessage[] @relation("Receiver")
  channels               Channel[]
  messages               Message[]
  members                Member[]
  MessagePrivates        MessagePrivate[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
}

model GameRecord {
  id                 Int      @id @default(autoincrement())
  finished           DateTime @default(now())
  winner             User     @relation(name: "won", fields: [winnerId], references: [id])
  winnerId           Int
  winnerRatingBefore Int
  winnerRatingAfter  Int
  loser              User     @relation(name: "lost", fields: [loserId], references: [id])
  loserId            Int
  loserRatingBefore  Int
  loserRatingAfter   Int
}

model Friendship {
  id         String           @id @default(uuid())
  sender     User             @relation("sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User             @relation("receiver", fields: [receiverId], references: [id])
  receiverId Int
  status     FriendshipStatus
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([senderId, receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Channel {
  id            String    @id @default(uuid())
  name          String
  inviteCode    String    @db.Text()
  password      String?   @db.VarChar(255)
  public        Boolean   @default(false)
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  members       Member[]
  bannedUsers   Int[]     @default([])
  silencedUsers Int[]     @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text()
  edited    Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  channelId        String
  channels         Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([channelId])
}

model MessagePrivate {
  id        String   @id @default(uuid())
  content   String   @db.Text()
  edited    Boolean  @default(false)
  
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  privateMessageId  String
  privateMessages  PrivateMessage @relation(fields: [privateMessageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([privateMessageId])
}

model Member {
  id           String     @id @default(uuid())
  role         MemberRole @default(GUEST)
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId    String
  channel      Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  silencedTime DateTime?   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([userId])
  @@index([channelId])
}

enum MemberRole {
  OWNER
  ADMIN
  GUEST
}

model PrivateMessage {
  id         String   @id @default(uuid())
  messages   MessagePrivate[] 

  senderId   Int
  sender     User     @relation(name: "Sender", fields: [senderId], references: [id])

  receiverId Int
  receiver   User     @relation(name: "Receiver", fields: [receiverId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
}
